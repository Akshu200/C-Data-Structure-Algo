#include <iostream>
using namespace std;


// STACK USING LINKED LIST


struct node
{
    int data;
    struct node* next;
};

struct node * top=NULL;
    
int isEmpty(struct node* top)
{
    if(top==NULL)
    {
        return 1;
    }
    return 0;
    
}
int isFull(struct node* top)
{
    struct node* n;
    n=(struct node*)malloc(sizeof(struct node));
    if(n==NULL)
    {
        return 1;
    }
    return 0;
    
}

struct node* push(struct node* top, int value)// adding value to stack
{
    if(isFull(top))
    {
        cout<<endl<<"stack is Full / overflow"<<endl;
    }
    else
    {
        struct node* n=(struct node*)malloc(sizeof(struct node));
        n->data=value;
        n->next=top;
        
        top=n;
        return top;
    }
}

int pop(struct node* tp)
{
    if(isEmpty(tp))
    {
         cout<<endl<<"stack is Empty / underflow"<<endl;
    }
    else
    {
        struct node* n=tp;
        top=tp->next;
        int x=n->data;
        delete(n);
        return x;
    }
    
}
void stacktraversal(struct node* ptr)
{
    cout<<endl<<"****Stack traversal*****";
    while(ptr!=NULL)
    {
        cout<<endl<<"Data is : "<<ptr->data;
        ptr=ptr->next;
    }
}
int main()
{ 
        // STACK USING LINKED LIST
    
    top=push(top, 10);
    top=push(top, 20);
    top=push(top, 30);
    top=push(top, 40);
    top=push(top, 50);
    
    stacktraversal(top);
    

    pop(top);
    pop(top);
    int value=pop(top);
    cout<<endl<<"deleted element is :"<<value;
    
     stacktraversal(top);
     
    return 0;
}